# 0 "sec_env.pml"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "sec_env.pml"







ltl p2 { []<> (cabin_door_is_open==true) }
# 17 "sec_env.pml"
mtype { down, up, none };


chan request = [2] of { byte };

bool floor_request_made[2];


bool floor_door_is_open[2];


byte current_floor;
bool cabin_door_is_open;
chan update_cabin_door = [0] of { bool };
chan cabin_door_updated = [0] of { bool };
chan move = [0] of { bool };
chan floor_reached = [0] of { bool };


chan go = [0] of { byte };
chan served = [0] of { bool };


active proctype cabin_door() {
 do
 :: update_cabin_door?true -> floor_door_is_open[current_floor] = true; cabin_door_is_open = true; cabin_door_updated!true;
 :: update_cabin_door?false -> cabin_door_is_open = false; floor_door_is_open[current_floor] = false; cabin_door_updated!false;
 od;
}


active proctype elevator_engine() {
 do
 :: move?true ->
  do
  :: move?false -> break;
  :: floor_reached!true;
  od;
 od;
}


active proctype main_control() {
 byte dest;
 do
 :: go?dest ->
    current_floor = dest;


    assert(0 <= current_floor && current_floor < 2);

    floor_request_made[dest] = false;
    served!true;
 od;
}


active proctype req_handler() {
 byte dest;
 do
 :: request?dest -> go!dest; served?true;
 od;
}


active [2] proctype req_button() {
 do
 :: !floor_request_made[_pid-4] ->
    atomic {
  request!_pid-4;
  floor_request_made[_pid-4] = true;
    }
 od;
}
