# 0 "sec_multi_env.pml"
# 0 "<built-in>"
# 0 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 0 "<command-line>" 2
# 1 "sec_multi_env.pml"
# 11 "sec_multi_env.pml"
ltl a1 { [] (floor_request_made[1] -> (<> (current_floor == 1)))}
ltl a2 { [] (floor_request_made[2] -> (<> (current_floor == 2)))}
ltl b1 {[]<> (cabin_door_is_open==true)}
ltl b2 {[]<> (cabin_door_is_open==false)}
ltl c {cabin_door_is_open == true -> floor_door_is_open[current_floor] == true}
# 24 "sec_multi_env.pml"
mtype { down, up, none };


chan request = [4] of { byte };


bool floor_request_made[4];


typedef shaft {
    bool shaft[4];
};

shaft floor_door_is_open[M];


byte current_floor[M];
bool cabin_door_is_open[M];

chan update_cabin_door[M] = [0] of { bool };
chan cabin_door_updated[M] = [0] of { bool };
chan move[M] = [0] of { bool };
chan floor_reached[M] = [0] of { bool };


chan go[M] = [0] of { byte };
chan served[M] = [0] of { bool };


active[M] proctype cabin_door() {
 do
 :: update_cabin_door?true -> floor_door_is_open[current_floor] = true; cabin_door_is_open = true; cabin_door_updated!true;
 :: update_cabin_door?false -> cabin_door_is_open = false; floor_door_is_open[current_floor] = false; cabin_door_updated!false;
 od;
}


active[M] proctype elevator_engine() {
 do
 :: move?true ->
  do
  :: move?false -> break;
  :: floor_reached!true;
  od;
 od;
}
# 82 "sec_multi_env.pml"
active[M] proctype main_control() {
 byte dest;
 mtype direction;
 do
 :: go?dest ->
  update_cabin_door!false;
  cabin_door_updated?false;
  if
  :: dest > current_floor ->
   direction = up;
   move!true;
   floor_reached?true;
   current_floor = dest;
   move!false;
   update_cabin_door!true;
   cabin_door_updated?true;
  :: dest < current_floor ->
   direction = down;
   move!true;
   floor_reached?true;
   current_floor = dest;
   move!false;
   update_cabin_door!true;
   cabin_door_updated?true;
  :: else ->
   direction = none;
   update_cabin_door!true;
   cabin_door_updated?true;
  fi


    assert(0 <= current_floor && current_floor < 4);


    floor_request_made[dest] = false;
    served!true;
 od;
}
# 136 "sec_multi_env.pml"
active proctype req_handler() {
 byte dest;
 byte elevator = 0
    do
 :: elevator < M ->
     request?dest -> go[M]!dest; served[M]?true;
  M++;







 od;
}



active [4*M] proctype req_button() {
 do
 :: !floor_request_made[_pid-4] ->
    atomic {
  request!_pid-4;
  floor_request_made[_pid-4] = true;
    }
 od;
}
